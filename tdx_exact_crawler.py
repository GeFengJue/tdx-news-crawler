import requests
import json
import sqlite3
import re
from datetime import datetime
from urllib.parse import urlencode

class TDXExactCrawler:
    def __init__(self):
        self.base_url = "http://fast1.tdx.com.cn:7615"
        self.api_url = f"{self.base_url}/TQLEX"
        self.session = requests.Session()
        
        # ËÆæÁΩÆÁ≤æÁ°ÆÁöÑËØ∑Ê±ÇÂ§¥ÔºàÂü∫‰∫éÊÇ®Êèê‰æõÁöÑF12Êï∞ÊçÆÔºâ
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 Edg/140.0.0.0',
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6',
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'Origin': 'http://fast1.tdx.com.cn:7615',
            'Referer': 'http://fast1.tdx.com.cn:7615/site/tdx_zxts/page_main.html?tabsel=0',
            'X-Requested-With': 'XMLHttpRequest',
            'Connection': 'keep-alive',
            'Cookie': 'ASPSessionID=; LST=00'
        }
    
    def init_session(self):
        """ÂàùÂßãÂåñ‰ºöËØù"""
        try:
            print("üîÑ ÂàùÂßãÂåñ‰ºöËØù...")
            main_url = f"{self.base_url}/site/tdx_zxts/page_main.html?tabsel=0"
            response = self.session.get(main_url, headers=self.headers, timeout=10)
            
            # Êõ¥Êñ∞Cookie
            if 'Set-Cookie' in response.headers:
                self.headers['Cookie'] = response.headers['Set-Cookie']
            
            print(f"‚úÖ ‰ºöËØùÂàùÂßãÂåñÊàêÂäüÔºåÁä∂ÊÄÅÁ†Å: {response.status_code}")
            return True
        except Exception as e:
            print(f"‚ùå ‰ºöËØùÂàùÂßãÂåñÂ§±Ë¥•: {e}")
            return False
    
    def fetch_real_data(self):
        """Ëé∑ÂèñÁúüÂÆûÊï∞ÊçÆ - Âü∫‰∫éÊÇ®Êèê‰æõÁöÑF12ÊçïËé∑Êï∞ÊçÆ"""
        try:
            print("üîÑ ÂèëÈÄÅÁ≤æÁ°ÆAPIËØ∑Ê±Ç...")
            
            # Âü∫‰∫éÊÇ®Êèê‰æõÁöÑÁúüÂÆûF12Êï∞ÊçÆÊûÑÂª∫Ë¥üËΩΩ
            # ÊÇ®Êèê‰æõÁöÑË¥üËΩΩÊ†ºÂºèÔºö{"CallName":"tdxzb_zxts_ywbb","Params":["2025-09-24 00:00:00","",1,50,"0"],"secuparse":true,"parsefld":"summary","tdxPageID":"_UrlEncode"}
            
            # ÊûÑÂª∫ÂÆåÊï¥ÁöÑËØ∑Ê±ÇÂèÇÊï∞
            request_params = {
                "CallName": "tdxzb_zxts_ywbb",
                "Params": ["2025-09-24 00:00:00", "", 1, 50, "0"],
                "secuparse": True,
                "parsefld": "summary",
                "tdxPageID": "_UrlEncode"
            }
            
            # Â∞ÜJSONÂèÇÊï∞ËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤
            json_params = json.dumps(request_params, ensure_ascii=False)
            
            # ÊûÑÂª∫Ë°®ÂçïÊï∞ÊçÆÔºàÂü∫‰∫éÊÇ®Êèê‰æõÁöÑF12Êï∞ÊçÆÔºâ
            form_data = {
                'Entry': 'CWServ.tdxzb_zxts_ywbb'
            }
            
            # ÂÆåÊï¥ÁöÑURLÔºàÂåÖÂê´EntryÂèÇÊï∞Ôºâ
            full_url = f"{self.api_url}?Entry=CWServ.tdxzb_zxts_ywbb"
            
            print(f"üîç ËØ∑Ê±ÇURL: {full_url}")
            print(f"üîç ËØ∑Ê±ÇÂèÇÊï∞: {json_params}")
            
            # ÂèëÈÄÅPOSTËØ∑Ê±Ç
            response = self.session.post(
                full_url,
                data=form_data,  # Âè™ÂèëÈÄÅEntryÂèÇÊï∞
                headers=self.headers,
                timeout=15
            )
            
            print(f"üìä ÂìçÂ∫îÁä∂ÊÄÅÁ†Å: {response.status_code}")
            print(f"üìä ÂìçÂ∫îÂÜÖÂÆπÈïøÂ∫¶: {len(response.text)}")
            
            if response.status_code == 200:
                try:
                    # Â∞ùËØïËß£ÊûêJSONÂìçÂ∫î
                    data = response.json()
                    error_code = data.get('ErrorCode')
                    error_info = data.get('ErrorInfo', '')
                    
                    print(f"üîç ÈîôËØØÁ†Å: {error_code}")
                    print(f"üîç ÈîôËØØ‰ø°ÊÅØ: {error_info}")
                    
                    if error_code == 0:
                        print("‚úÖ APIËØ∑Ê±ÇÊàêÂäü!")
                        result_sets = data.get('ResultSets', [])
                        if result_sets:
                            content = result_sets[0].get('Content', [])
                            print(f"üìà Ëé∑ÂèñÂà∞ {len(content)} Êù°Êï∞ÊçÆ")
                            
                            # ÊòæÁ§∫ÂâçÂá†Êù°Êï∞ÊçÆÈ¢ÑËßà
                            if content:
                                print("\nüì∞ Êï∞ÊçÆÈ¢ÑËßà:")
                                for i, row in enumerate(content[:3], 1):
                                    if len(row) >= 3:
                                        print(f"   {i}. {row[2]}")  # Ê†áÈ¢ò
                            
                            return data
                        else:
                            print("‚ö†Ô∏è Êó†ÁªìÊûúÊï∞ÊçÆ")
                    else:
                        print(f"‚ùå APIËøîÂõûÈîôËØØ")
                        
                except json.JSONDecodeError as e:
                    print(f"‚ùå JSONËß£ÊûêÂ§±Ë¥•: {e}")
                    print(f"üìÑ ÂìçÂ∫îÂÜÖÂÆπ: {response.text[:500]}")
            else:
                print(f"‚ùå HTTPËØ∑Ê±ÇÂ§±Ë¥•ÔºåÁä∂ÊÄÅÁ†Å: {response.status_code}")
                print(f"üìÑ ÂìçÂ∫îÂÜÖÂÆπ: {response.text[:200]}")
                
            return None
            
        except Exception as e:
            print(f"‚ùå ËØ∑Ê±ÇËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {e}")
            return None
    
    def test_different_formats(self):
        """ÊµãËØï‰∏çÂêåÁöÑËØ∑Ê±ÇÊ†ºÂºè"""
        print("\nüîç ÊµãËØï‰∏çÂêåËØ∑Ê±ÇÊ†ºÂºè...")
        
        test_cases = [
            # ÊµãËØïÁî®‰æã1: Âü∫Êú¨EntryÂèÇÊï∞
            {"Entry": "CWServ.tdxzb_zxts_ywbb"},
            
            # ÊµãËØïÁî®‰æã2: Â∏¶JSONÂèÇÊï∞
            {"Entry": "CWServ.tdxzb_zxts_ywbb", "data": json.dumps({
                "CallName": "tdxzb_zxts_ywbb",
                "Params": ["2025-09-24 00:00:00", "", 1, 50, "0"]
            })},
            
            # ÊµãËØïÁî®‰æã3: ‰ªÖJSONÂèÇÊï∞
            {"CallName": "tdxzb_zxts_ywbb", "Params": '["2025-09-24 00:00:00","",1,50,"0"]'},
        ]
        
        for i, form_data in enumerate(test_cases, 1):
            print(f"\nüìã ÊµãËØïÊ†ºÂºè {i}:")
            print(f"   ÂèÇÊï∞: {form_data}")
            
            try:
                response = self.session.post(
                    self.api_url,
                    data=form_data,
                    headers=self.headers,
                    timeout=10
                )
                
                print(f"   Áä∂ÊÄÅÁ†Å: {response.status_code}")
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        error_code = data.get('ErrorCode')
                        print(f"   ÈîôËØØÁ†Å: {error_code}")
                        
                        if error_code == 0:
                            print("   ‚úÖ ÊàêÂäü!")
                            return form_data, data
                    except:
                        print(f"   ÂìçÂ∫î: {response.text[:100]}")
                
            except Exception as e:
                print(f"   ËØ∑Ê±ÇÂ§±Ë¥•: {e}")
        
        return None, None
    
    def create_database(self):
        """ÂàõÂª∫Êï∞ÊçÆÂ∫ì"""
        conn = sqlite3.connect('tdx_exact_data.db')
        cursor = conn.cursor()
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS stock_announcements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            position INTEGER,
            record_id INTEGER UNIQUE,
            title TEXT,
            issue_date TEXT,
            summary TEXT,
            source TEXT,
            relate_id INTEGER,
            proc_id INTEGER,
            mark_id INTEGER,
            stock_code TEXT,
            stock_name TEXT,
            crawl_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        conn.commit()
        return conn
    
    def extract_stock_info(self, title):
        """‰ªéÊ†áÈ¢ò‰∏≠ÊèêÂèñËÇ°Á•®‰ª£Á†ÅÂíåÂêçÁß∞"""
        pattern = r'([^\(]+)\((\d{6})\)'
        match = re.search(pattern, title)
        if match:
            stock_name = match.group(1).strip()
            stock_code = match.group(2)
            return stock_code, stock_name
        return None, None
    
    def save_data(self, conn, data):
        """‰øùÂ≠òÊï∞ÊçÆÂà∞Êï∞ÊçÆÂ∫ì"""
        if not data or 'ResultSets' not in data or len(data['ResultSets']) == 0:
            print("‚ùå Êó†ÊïàÁöÑÊï∞ÊçÆÊ†ºÂºè")
            return 0
        
        cursor = conn.cursor()
        result_set = data['ResultSets'][0]
        col_names = result_set['ColName']
        content_data = result_set['Content']
        
        inserted_count = 0
        for row in content_data:
            if len(row) >= len(col_names):
                data_dict = dict(zip(col_names, row))
                
                # ÊèêÂèñËÇ°Á•®‰ø°ÊÅØ
                title = data_dict.get('title', '')
                stock_code, stock_name = self.extract_stock_info(title)
                
                try:
                    cursor.execute('''
                    INSERT OR IGNORE INTO stock_announcements 
                    (position, record_id, title, issue_date, summary, source, relate_id, proc_id, mark_id, stock_code, stock_name)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        data_dict.get('pos', 0),
                        data_dict.get('rec_id', 0),
                        title,
                        data_dict.get('issue_date', ''),
                        data_dict.get('summary', ''),
                        data_dict.get('src_info', ''),
                        data_dict.get('relate_id', 0),
                        data_dict.get('Proc_Id', 0),
                        data_dict.get('Mark_Id', 0),
                        stock_code,
                        stock_name
                    ))
                    
                    if cursor.rowcount > 0:
                        inserted_count += 1
                    
                except Exception as e:
                    print(f"‚ùå ÊèíÂÖ•Êï∞ÊçÆÂ§±Ë¥•: {e}")
        
        conn.commit()
        return inserted_count
    
    def run(self):
        """ËøêË°åÁà¨Ëô´"""
        print("üöÄ ÂêØÂä®ÂêåËä±È°∫Á≤æÁ°ÆÊï∞ÊçÆÁà¨Ëô´...")
        print(f"‚è∞ ÂΩìÂâçÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # ÂàùÂßãÂåñ‰ºöËØù
        if not self.init_session():
            return
        
        # ÂàõÂª∫Êï∞ÊçÆÂ∫ì
        conn = self.create_database()
        print("‚úÖ Êï∞ÊçÆÂ∫ìÂáÜÂ§áÂ∞±Áª™")
        
        # È¶ñÂÖàÂ∞ùËØïÁ≤æÁ°ÆËØ∑Ê±Ç
        print("\nüéØ Â∞ùËØïÁ≤æÁ°ÆËØ∑Ê±ÇÊ†ºÂºè...")
        real_data = self.fetch_real_data()
        
        if not real_data:
            print("\nüîç Á≤æÁ°ÆËØ∑Ê±ÇÂ§±Ë¥•ÔºåÂ∞ùËØï‰∏çÂêåÊ†ºÂºè...")
            successful_format, real_data = self.test_different_formats()
            
            if successful_format:
                print(f"‚úÖ ÊâæÂà∞ÊàêÂäüÊ†ºÂºè: {successful_format}")
        
        if real_data:
            # ‰øùÂ≠òÊï∞ÊçÆ
            saved_count = self.save_data(conn, real_data)
            print(f"‚úÖ ÊàêÂäü‰øùÂ≠ò {saved_count} Êù°Êï∞ÊçÆÂà∞Êï∞ÊçÆÂ∫ì")
            
            # ÊòæÁ§∫ÁªüËÆ°‰ø°ÊÅØ
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM stock_announcements")
            total_count = cursor.fetchone()[0]
            
            if total_count > 0:
                cursor.execute("SELECT COUNT(DISTINCT stock_code) FROM stock_announcements WHERE stock_code IS NOT NULL")
                stock_count = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(DISTINCT source) FROM stock_announcements")
                source_count = cursor.fetchone()[0]
                
                print(f"\nüìä Êï∞ÊçÆÂ∫ìÁªüËÆ°:")
                print(f"   ÊÄªËÆ∞ÂΩïÊï∞: {total_count}")
                print(f"   ËÇ°Á•®Êï∞Èáè: {stock_count}")
                print(f"   Êù•Ê∫êÊï∞Èáè: {source_count}")
                
                # ÊòæÁ§∫ÊúÄÊñ∞Êï∞ÊçÆ
                cursor.execute("""
                SELECT title, stock_code, issue_date, source 
                FROM stock_announcements 
                ORDER BY issue_date DESC 
                LIMIT 3
                """)
                
                print(f"\nüì∞ ÊúÄÊñ∞ÂÖ¨Âëä:")
                for i, (title, code, date, source) in enumerate(cursor.fetchall(), 1):
                    short_title = title[:60] + "..." if len(title) > 60 else title
                    print(f"   {i}. {short_title}")
                    print(f"      ËÇ°Á•®: {code} | Êù•Ê∫ê: {source} | Êó∂Èó¥: {date}")
            else:
                print("‚ö†Ô∏è Êï∞ÊçÆÂ∫ì‰∏≠Ê≤°Êúâ‰øùÂ≠ò‰ªª‰ΩïÊï∞ÊçÆ")
        else:
            print("‚ùå Êú™ËÉΩËé∑ÂèñÂà∞ÊúâÊïàÊï∞ÊçÆ")
        
        conn.close()
        print("\nüéâ Áà¨Ëô´ÊâßË°åÂÆåÊàê!")

def main():
    crawler = TDXExactCrawler()
    crawler.run()

if __name__ == "__main__":
    main()